plugins {
    id "java"
    id "idea"
    id "edu.wpi.first.GradleRIO" version "2025.3.2"
    id "com.peterabeles.gversion" version "1.10"
    id "com.diffplug.spotless" version "6.22.0"
}

spotless {
    java {
        googleJavaFormat().aosp()
        targetExclude(
            'src/main/java/com/team254/frc2025/BuildConstants.java',
            'src/main/java/com/team254/frc2025/subsystems/superstructure/ModalSuperstructureTriggers.java'
        )
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "com.team254.frc2025.Main"

final MAX_JAVA_HEAP_SIZE_MB = 100

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    // TO ENTER PROFILE MODE:
                    // Run: ./gradlew deploy -PprofileMode
                    // -- do not do this unless you want profiling mode, it can slow the robot down.
                    project.logger.lifecycle('Checking if profile mode...')
                    //Enter profile mode with ./gradlew deploy -PprofileMode
                    if (frc.project.hasProperty("profileMode")) {
                        project.logger.lifecycle('Debug mode enabled!')
                        project.logger.lifecycle("Connect JMX client to roborio-" + team + "-frc.local:1099 or " + "10." + (team / 100) + ".2" + ":1099 for RoboRIO profiling with visualvm.")
                        jvmArgs.add("-Dcom.sun.management.jmxremote=true")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.port=1099")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.local.only=false")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.ssl=false")
                        jvmArgs.add("-Dcom.sun.management.jmxremote.authenticate=false")
                        jvmArgs.add("-Djava.rmi.server.hostname=" + "10." + (team / 100) + ".2")

                    }
                    gcType = 'other'
//                    jvmArgs.add("-Don.robot=true") // This won't be used in simulation
//                    jvmArgs.add("-Dcom.sun.management.jmxremote=true")
//                    jvmArgs.add("-Dcom.sun.management.jmxremote.port=1198")
//                    jvmArgs.add("-Dcom.sun.management.jmxremote.local.only=false")
//                    jvmArgs.add("-Dcom.sun.management.jmxremote.ssl=false")
//                    jvmArgs.add("-Dcom.sun.management.jmxremote.authenticate=false")
//                    jvmArgs.add("-Djava.rmi.server.hostname=10.34.76.2")

                    jvmArgs.add("-XX:+UnlockExperimentalVMOptions")

                    // Set the minimum heap size to the maximum heap size to avoid resizing
                    jvmArgs.add("-Xmx" + MAX_JAVA_HEAP_SIZE_MB + "M")
                    jvmArgs.add("-Xms" + MAX_JAVA_HEAP_SIZE_MB + "M")
                    jvmArgs.add("-XX:GCTimeRatio=5")
                    //jvmArgs.add("-ea") // Enable assertions
                    jvmArgs.add("-XX:+UseSerialGC")
                    jvmArgs.add("-XX:MaxGCPauseMillis=50")
                    jvmArgs.add("-XX:+AlwaysPreTouch")// Pre-touch memory pages used by the JVM during initialization
                    //jvmArgs.add("-XX:+ParallelRefProcEnabled") // Use multiple threads to clean up reference objects

                    // Causes GC to write to file system which can cause major latency if disk IO is high -- See https://www.evanjones.ca/jvm-mmap-pause.html
                    //jvmArgs.add("-XX:+PerfDisableSharedMem")
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    // Change to true to delete files on roboRIO that no
                    // longer exist in deploy directory on roboRIO
                    deleteOldFiles = false
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

task(replayWatch, type: JavaExec) {
    mainClass = "org.littletonrobotics.junction.ReplayWatch"
    classpath = sourceSets.main.runtimeClasspath
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}


simulateJavaRelease {
    project.logger.lifecycle('Checking if replay mode...')
    if (frc.project.hasProperty("replay")) {
        project.logger.lifecycle('Replay mode activated!')
        args '--replay'
    }
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

// Create version file
project.compileJava.dependsOn(createVersionFile)
gversion {
    srcDir       = "src/main/java/"
    classPackage = "com.team254.frc2025"
    className    = "BuildConstants"
    dateFormat   = "yyyy-MM-dd HH:mm:ss z"
    timeZone     = "America/Los_Angeles"
    indent       = "  "
}
